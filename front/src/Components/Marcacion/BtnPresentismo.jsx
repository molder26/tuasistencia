import { DialogTitle } from "@mui/material";
import { Dialog } from "@mui/material";
import { Button } from "@mui/material";
import { Box } from "@mui/material";
import DialogContent from "@mui/material/DialogContent";
import { useEffect, useState } from "react";
import QRCode from "react-qr-code";
import IconButton from "@mui/material/IconButton";
import CloseIcon from "@mui/icons-material/Close";
import { useAppDispatch } from "../../app/hooks";
import { fetchAllEmployees } from "../../store/slices/employee/employeeSlice";
// import { io } from "socket.io-client";
// import { internalIpV4 } from "internal-ip";

// import os from "os";
// let ifaces = os.networkInterfaces();
// console.log(ifaces.lo);

// *** Codigo agregado para detectar ip's Docker  ***
import { networkInterfaces } from "os";
// import {sync} from 'internal-ip';

const dockerSubnets = ["172.16.0.0/12", "192.168.0.0/16"];

// const ip = sync();

// const socket = io("localhost:3001");

const interfaces = networkInterfaces();
// function getIPAddresses() {

//     var ipAddresses = [];

//     var interfaces = require('os').networkInterfaces();
//     for (var devName in interfaces) {
//         var iface = interfaces[devName];
//         for (var i = 0; i < iface.length; i++) {
//             var alias = iface[i];
//             if (alias.family === 'IPv4' && alias.address !== '127.0.0.1' && !alias.internal) {
//                 ipAddresses.push(alias.address);
//             }
//         }
//     }
//     return ipAddresses;
// }

function BtnPresentismo({ employee }) {
  const dispatch = useAppDispatch();
  const [open, setOpen] = useState(false);
  let oldState = employee.logs[0] ?? false;

  let isDockerIp = false;
  let ipDetected = "";
  let adres = "";
  for (const intfName in interfaces) {
    console.log(intfName);
    // if (intfName.startsWith("docker")) {
    // 	const intf = interfaces[intfName];
    // 	for (const { address } of intf) {
    // 		adres = address;
    // 		for (const subnet of dockerSubnets) {
    // 			if (require("ip-range-check")(address, subnet)) {
    // 				isDockerIp = true;
    // 				break;
    // 			}

    // 			console.log(address);
    // 			ipDetected = address;
    // 		}
    // 		if (isDockerIp) break;
    // 	}
    // 	if (isDockerIp) break;
    // }
  }

  if (isDockerIp) {
    console.log("IP address is generated by Docker, skipping.");
  } else {
    console.log(`Local IP address: ${adres}`);
  }

  const [state, setState] = useState(!oldState.isIn);
  //  [ ip ] = useState(undefined);
  const [ip, setIp] = useState(undefined);

  useEffect(() => {
    setState(!oldState.isIn);
  }, [oldState]);

  useEffect(() => {
    async function getIp() {
      // setIp(await internalIpV4());
      // console.log(ifaces);
    }
    getIp();
  }, []);

  const handleClickOpen = () => {
    setOpen(true);
    // connectSocket();
  };

  const handleClose = () => {
    dispatch(fetchAllEmployees());
    setOpen(false);
  };

  return (
    <>
      <Box>
        <Button
          style={{
            margin: "0 0 0 -8%",
            width: "25%",
            padding: "0 30px 0 30px",
            display: "flex",
            alignContent: "center",
            backgroundColor: state ? "" : "red",
          }}
          variant="contained"
          onClick={handleClickOpen}
        >
          {state ? "Ingreso" : "Egreso"}
        </Button>
      </Box>
      <Dialog open={open} onClose={handleClose}>
        <IconButton
          aria-label="close"
          onClick={handleClose}
          sx={{
            position: "absolute",
            right: 8,
            top: 8,
            color: (theme) => theme.palette.grey[500],
          }}
        >
          <CloseIcon />
        </IconButton>
        <DialogTitle>Marcar {state ? "Entrada" : "Salida"}</DialogTitle>
        <DialogContent>
          <p>{`${employee.name} DNI ${employee.dni}`}</p>
          <QRCode
            // value={`https://tuasistencia.ar/qr/${state ? 0 : 1}/${
            value={`http://localhost:5173/qr/${state ? 0 : 1}/${employee.dni}`}
          />
        </DialogContent>
      </Dialog>
      {/* <div>
				<p>Connected: {"" + isConnected}</p>
			</div> */}
    </>
  );
}

export default BtnPresentismo;
